{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","CardsArray","map","user","i","src_Components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","borderTop","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","setTimeout","fetch","then","response","json","users","_this3","filteredRobots","filter","robot","toLowerCase","includes","length","textTransform","Components_SearchBox","Components_Scroll","Components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAgBeA,eAbF,SAACC,GAAU,IACfC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BT,EAA1B,cACrBG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,UAAKH,OCQEQ,EAdE,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OAETC,EAAaD,EAAOE,IAAI,SAACC,EAAMC,GACjC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKF,EAAGhB,GAAIY,EAAOI,GAAGhB,GAAIC,KAAMW,EAAOI,GAAGf,KAAMC,MAAOU,EAAOI,GAAGd,UAGlF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVO,ICGEM,EAZG,SAAAR,GAAiCA,EAA/BS,YAA+B,IAAlBC,EAAkBV,EAAlBU,aAE7B,OACIlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,+BACbgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGXI,EATA,SAAC1B,GAEZ,OACII,EAAAC,EAAAC,cAAA,OAAKqB,MAAQ,CAACC,UAAW,SAAUC,UAAU,iBAAkBC,OAAQ,UAClE9B,EAAM+B,WC2DJC,cAvDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBFI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAACrB,YAAYoB,EAAME,OAAOC,SAhBxCX,EAAKY,MAAQ,CACXhC,OAAQ,GACRQ,YAAa,IAJHY,mFAQK,IAAAa,EAAAV,KACjBW,WAAW,WACTC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAIN,EAAKJ,SAAS,CAAC7B,OAAOuC,OACvC,sCAQK,IAAAC,EAAAjB,KAEDkB,EAAiBlB,KAAKS,MAAMhC,OAAO0C,OAAO,SAAAC,GAC9C,OAAOA,EAAMtD,KAAKuD,cAAcC,SAASL,EAAKR,MAAMxB,YAAYoC,iBAGlE,OAAgC,IAA7BrB,KAAKS,MAAMhC,OAAO8C,OAEjBvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,0BAKFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQoB,MAAO,CAACiC,cAAe,cAA7C,eAGAxD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuD,EAAD,CAAWvC,aAAcc,KAAKI,kBAEhCpC,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACwD,EAAD,KACE1D,EAAAC,EAAAC,cAACyD,EAAD,CAAUlD,OAAQyC,aAhDZU,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OACLnE,EAAAC,EAAAC,cAACkE,EAAD,MACEC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.bd748239.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n  const {id, name, email} = props;\r\n  return (\r\n    <div className='tc bg-light-gray dib br3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?500/500`}/>\r\n      <div>\r\n        <h3>{name}</h3>\r\n        <h5>{email}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n//import {robots} from './robots';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    const CardsArray = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} /> \r\n    });\r\n        \r\n    return(\r\n        <div className=\"contaier\">\r\n            {CardsArray}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\r\n    return (\r\n        <div>\r\n            <input className='pa2 b--blue bg-lightest-blue' \r\n                type=\"search\" \r\n                placeholder=\"Search Robots\"\r\n                onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style= {{overflowY: 'scroll', borderTop:'2px solid gray', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport CardList from '../Components/CardList';\n//import {robots} from '../robots';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\n\n\n\nclass App extends Component {\n  // 1 First\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n  // 3 Third\n  componentDidMount(){\n    setTimeout(() => { // just for trying [Loading... page]\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n        .then(users => this.setState({robots:users}));\n    },2000);\n   \n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField:event.target.value});\n  }\n  // 2 Second\n  render() {\n\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n\n    if(this.state.robots.length === 0) {\n      return (\n        <div className='tc ma6'>\n          <i className=\"fa fa-spinner fa-spin\" ></i>\n          <h3>Loading ...</h3>\n        </div>\n      );\n    } else {\n      return (\n        <div className='tc bg-light-green'>\n          <h1 className='f1 tc' style={{textTransform: 'uppercase'}}>RoboFriends</h1>\n  \n  \n          <div>\n            <SearchBox searchChange={this.onSearchChange}/>\n          </div>\n          <br/>\n  \n          <Scroll>\n            <CardList robots={filteredRobots}/>\n          </Scroll>\n      </div>\n      );\n    }\n    \n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\n//import CardList from './CardList';\n//import { robots } from './robots';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App/>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}